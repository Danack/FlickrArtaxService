<?php

//Auto-generated by ArtaxServiceBuilder - https://github.com/Danack/ArtaxServiceBuilder
//
//Do not be surprised when any changes to this file are over-written.
//
namespace FlickrService\Operation;

class flickrPeopleGetPhotos implements \ArtaxServiceBuilder\Operation {

    /**
     * @var \FlickrService\FlickrAPI\FlickrAPI
     */
    public $api = null;

    /**
     * @var array
     */
    public $parameters = null;

    /**
     * @var \Amp\Artax\Response
     */
    public $response = null;

    /**
     * @var \Amp\Artax\Response
     */
    public $originalResponse = null;

    /**
     * Get the last response.
     *
     * @return \Amp\Artax\Response
     */
    public function getResponse() {
        return $this->response;
    }

    /**
     * Set the last response. This should only be used by the API class when the
     * operation has been dispatched. Storing the response is required as some APIs
     * store out-of-bound information in the headers e.g. rate-limit info, pagination
     * that is not really part of the operation.
     */
    public function setResponse(\Amp\Artax\Response $response) {
        $this->response = $response;
    }

    public function __construct(\FlickrService\FlickrAPI\FlickrAPI $api, $api_key, $user_id) {
        $defaultParams = [
            'format' => 'json',
            'nojsoncallback' => '1',
            'method' => 'flickr.people.getPhotos',
        ];
        $this->setParams($defaultParams);
        $this->api = $api;
        $this->parameters['api_key'] = $api_key;
        $this->parameters['user_id'] = $user_id;
    }

    public function setAPI(\FlickrService\FlickrAPI\FlickrAPI $api) {
        $this->api = $api;
    }

    public function setParams(array $params) {
        if (array_key_exists('format', $params)) {
            $this->parameters['format'] = $params['format'];
        }
        if (array_key_exists('apiKey', $params)) {
            $this->parameters['api_key'] = $params['apiKey'];
        }
        if (array_key_exists('nojsoncallback', $params)) {
            $this->parameters['nojsoncallback'] = $params['nojsoncallback'];
        }
        if (array_key_exists('userID', $params)) {
            $this->parameters['user_id'] = $params['userID'];
        }
        if (array_key_exists('safeSearch', $params)) {
            $this->parameters['safe_search'] = $params['safeSearch'];
        }
        if (array_key_exists('min_upload_date', $params)) {
            $this->parameters['min_upload_date'] = $params['min_upload_date'];
        }
        if (array_key_exists('max_upload_date', $params)) {
            $this->parameters['max_upload_date'] = $params['max_upload_date'];
        }
        if (array_key_exists('minTakenDate', $params)) {
            $this->parameters['min_taken_date'] = $params['minTakenDate'];
        }
        if (array_key_exists('maxTakenDate', $params)) {
            $this->parameters['max_taken_date'] = $params['maxTakenDate'];
        }
        if (array_key_exists('contentType', $params)) {
            $this->parameters['content_type'] = $params['contentType'];
        }
        if (array_key_exists('privacy_filter', $params)) {
            $this->parameters['privacy_filter'] = $params['privacy_filter'];
        }
        if (array_key_exists('extras', $params)) {
            $this->parameters['extras'] = $params['extras'];
        }
        if (array_key_exists('perPage', $params)) {
            $this->parameters['per_page'] = $params['perPage'];
        }
        if (array_key_exists('page', $params)) {
            $this->parameters['page'] = $params['page'];
        }
        if (array_key_exists('method', $params)) {
            $this->parameters['method'] = $params['method'];
        }
    }

    /**
     * Set format
     *
     * @return $this
     */
    public function setFormat($format) {
        $this->parameters['format'] = $format;

        return $this;
    }

    /**
     * Set apiKey
     *
     * @return $this
     */
    public function setApiKey($apiKey) {
        $this->parameters['api_key'] = $apiKey;

        return $this;
    }

    /**
     * Set nojsoncallback
     *
     * @return $this
     */
    public function setNojsoncallback($nojsoncallback) {
        $this->parameters['nojsoncallback'] = $nojsoncallback;

        return $this;
    }

    /**
     * Set userID
     *
     * Which user to get the photos of
     *
     * @return $this
     */
    public function setUserID($userID) {
        $this->parameters['user_id'] = $userID;

        return $this;
    }

    /**
     * Set safeSearch
     *
     * todo - describe variable
     *
     * @return $this
     */
    public function setSafeSearch($safeSearch) {
        $this->parameters['safe_search'] = $safeSearch;

        return $this;
    }

    /**
     * Set min_upload_date
     *
     * todo - describe variable
     *
     * @return $this
     */
    public function setMin_upload_date($min_upload_date) {
        $this->parameters['min_upload_date'] = $min_upload_date;

        return $this;
    }

    /**
     * Set max_upload_date
     *
     * todo - describe variable
     *
     * @return $this
     */
    public function setMax_upload_date($max_upload_date) {
        $this->parameters['max_upload_date'] = $max_upload_date;

        return $this;
    }

    /**
     * Set minTakenDate
     *
     * todo - describe variable
     *
     * @return $this
     */
    public function setMinTakenDate($minTakenDate) {
        $this->parameters['min_taken_date'] = $minTakenDate;

        return $this;
    }

    /**
     * Set maxTakenDate
     *
     * todo - describe variable
     *
     * @return $this
     */
    public function setMaxTakenDate($maxTakenDate) {
        $this->parameters['max_taken_date'] = $maxTakenDate;

        return $this;
    }

    /**
     * Set contentType
     *
     * todo - describe variable
     *
     * @return $this
     */
    public function setContentType($contentType) {
        $this->parameters['content_type'] = $contentType;

        return $this;
    }

    /**
     * Set privacy_filter
     *
     * todo - describe variable
     *
     * @return $this
     */
    public function setPrivacy_filter($privacy_filter) {
        $this->parameters['privacy_filter'] = $privacy_filter;

        return $this;
    }

    /**
     * Set extras
     *
     * todo - describe variable
     *
     * @return $this
     */
    public function setExtras($extras) {
        $this->parameters['extras'] = $extras;

        return $this;
    }

    /**
     * Set perPage
     *
     * Number of items to return per page.
     *
     * @return $this
     */
    public function setPerPage($perPage) {
        $this->parameters['per_page'] = $perPage;

        return $this;
    }

    /**
     * Set page
     *
     * todo - describe variable
     *
     * @return $this
     */
    public function setPage($page) {
        $this->parameters['page'] = $page;

        return $this;
    }

    /**
     * Set method
     *
     * Which flickr call is being made.
     *
     * @return $this
     */
    public function setMethod($method) {
        $this->parameters['method'] = $method;

        return $this;
    }

    public function getParameters() {
        return $this->parameters;
    }

    /**
     * Apply any filters necessary to the parameter
     *
     * @return \FlickrService\Model\PhotoList
     * @param string $name The name of the parameter to get.
     */
    public function getFilteredParameter($name) {
        if (array_key_exists($name, $this->parameters) == false) {
            throw new \Exception('Parameter '.$name.' does not exist.');
        }

        $value = $this->parameters[$name];


        return $value;
    }

    /**
     * Create an Amp\Artax\Request object from the operation.
     *
     * @return \Amp\Artax\Request
     */
    public function createRequest() {
        $request = new \Amp\Artax\Request();
        $url = null;
        $request->setMethod('GET');

        $queryParameters = [];

        if (array_key_exists('format', $this->parameters) == true) {
        $value = $this->getFilteredParameter('format');
            $queryParameters['format'] = $value;
        }
        $value = $this->getFilteredParameter('api_key');
        $queryParameters['api_key'] = $value;
        if (array_key_exists('nojsoncallback', $this->parameters) == true) {
        $value = $this->getFilteredParameter('nojsoncallback');
            $queryParameters['nojsoncallback'] = $value;
        }
        $value = $this->getFilteredParameter('user_id');
        $queryParameters['user_id'] = $value;
        if (array_key_exists('safe_search', $this->parameters) == true) {
        $value = $this->getFilteredParameter('safe_search');
            $queryParameters['safe_search'] = $value;
        }
        if (array_key_exists('min_upload_date', $this->parameters) == true) {
        $value = $this->getFilteredParameter('min_upload_date');
            $queryParameters['min_upload_date'] = $value;
        }
        if (array_key_exists('max_upload_date', $this->parameters) == true) {
        $value = $this->getFilteredParameter('max_upload_date');
            $queryParameters['max_upload_date'] = $value;
        }
        if (array_key_exists('min_taken_date', $this->parameters) == true) {
        $value = $this->getFilteredParameter('min_taken_date');
            $queryParameters['min_taken_date'] = $value;
        }
        if (array_key_exists('max_taken_date', $this->parameters) == true) {
        $value = $this->getFilteredParameter('max_taken_date');
            $queryParameters['max_taken_date'] = $value;
        }
        if (array_key_exists('content_type', $this->parameters) == true) {
        $value = $this->getFilteredParameter('content_type');
            $queryParameters['content_type'] = $value;
        }
        if (array_key_exists('privacy_filter', $this->parameters) == true) {
        $value = $this->getFilteredParameter('privacy_filter');
            $queryParameters['privacy_filter'] = $value;
        }
        if (array_key_exists('extras', $this->parameters) == true) {
        $value = $this->getFilteredParameter('extras');
            $queryParameters['extras'] = $value;
        }
        if (array_key_exists('per_page', $this->parameters) == true) {
        $value = $this->getFilteredParameter('per_page');
            $queryParameters['per_page'] = $value;
        }
        if (array_key_exists('page', $this->parameters) == true) {
        $value = $this->getFilteredParameter('page');
            $queryParameters['page'] = $value;
        }
        if (array_key_exists('method', $this->parameters) == true) {
        $value = $this->getFilteredParameter('method');
            $queryParameters['method'] = $value;
        }

        //Parameters are parsed and set, lets prepare the request
        if ($url == null) {
            $url = "https://api.flickr.com/services/rest/";
        }
        if (count($queryParameters)) {
            $url = $url.'?'.http_build_query($queryParameters, '', '&', PHP_QUERY_RFC3986);
        }
        $request->setUri($url);

        return $request;
    }

    /**
     * Create and execute the operation, returning the raw response from the server.
     *
     * @return \Amp\Artax\Response
     */
    public function createAndExecute() {
        $request = $this->createRequest();
        $request = $this->api->signRequest($request);
        $response = $this->api->execute($request, $this);
        $this->response = $response;

        return $response;
    }

    /**
     * Create and execute the operation, then return the processed  response.
     *
     * @return mixed|\FlickrService\Model\PhotoList
     */
    public function call() {
        $request = $this->createRequest();
        $request = $this->api->signRequest($request);
        $response = $this->api->execute($request, $this);
        $this->response = $response;

        if ($this->shouldResponseBeProcessed($response)) {
            $instance = \FlickrService\Model\PhotoList::createFromResponse($response, $this);

            return $instance;
        }
        return $response;
    }

    /**
     * Execute the operation, returning the parsed response
     *
     * @return \FlickrService\Model\PhotoList
     */
    public function execute() {
        $request = $this->createRequest();
        return $this->dispatch($request);
    }

    /**
     * Execute the operation asynchronously, passing the parsed response to the
     * callback
     *
     * @return \Amp\Promise
     */
    public function executeAsync(callable $callable) {
        $request = $this->createRequest();
        return $this->dispatchAsync($request, $callable);
    }

    /**
     * Dispatch the request for this operation and process the response. Allows you to
     * modify the request before it is sent.
     *
     * @return \FlickrService\Model\PhotoList
     * @param \Amp\Artax\Request $request The request to be processed
     */
    public function dispatch(\Amp\Artax\Request $request) {
        $request = $this->api->signRequest($request);
        $response = $this->api->execute($request, $this);
        $this->response = $response;
        $instance = \FlickrService\Model\PhotoList::createFromResponse($response, $this);

        return $instance;
    }

    /**
     * Dispatch the request for this operation and process the response asynchronously.
     * Allows you to modify the request before it is sent.
     *
     * @return \FlickrService\Model\PhotoList
     * @param \Amp\Artax\Request $request The request to be processed
     * @param callable $callable The callable that processes the response
     */
    public function dispatchAsync(\Amp\Artax\Request $request, callable $callable) {
        return $this->api->executeAsync($request, $this, $callable);
    }

    /**
     * Dispatch the request for this operation and process the response. Allows you to
     * modify the request before it is sent.
     *
     * @return \FlickrService\Model\PhotoList
     * @param \Amp\Artax\Response $response The HTTP response.
     */
    public function processResponse(\Amp\Artax\Response $response) {
        $instance = \FlickrService\Model\PhotoList::createFromResponse($response, $this);

        return $instance;
    }

    /**
     * Determine whether the response should be processed. Override this method to have
     * a per-operation decision, otherwise the function is the API class will be used.
     *
     * @return \FlickrService\Model\PhotoList
     */
    public function shouldResponseBeProcessed(\Amp\Artax\Response $response) {
        return $this->api->shouldResponseBeProcessed($response);
    }

    /**
     * Determine whether the response is an error. Override this method to have a
     * per-operation decision, otherwise the function from the API class will be used.
     *
     * @return null|\ArtaxServiceBuilder\BadResponseException
     */
    public function translateResponseToException(\Amp\Artax\Response $response) {
        return $this->api->translateResponseToException($response);
    }

    /**
     * Determine whether the response indicates that we should use a cached response.
     * Override this method to have a per-operation decision, otherwise the
     * functionfrom the API class will be used.
     *
     * @return \FlickrService\Model\PhotoList
     */
    public function shouldUseCachedResponse(\Amp\Artax\Response $response) {
        return $this->api->shouldUseCachedResponse($response);
    }

    /**
     * Determine whether the response should be cached. Override this method to have a
     * per-operation decision, otherwise the function from the API class will be used.
     *
     * @return \FlickrService\Model\PhotoList
     */
    public function shouldResponseBeCached(\Amp\Artax\Response $response) {
        return $this->api->shouldResponseBeCached($response);
    }

    /**
     * Set the original response. This may be different from the cached response if one
     * is used.
     */
    public function setOriginalResponse(\Amp\Artax\Response $response) {
        $this->originalResponse = $response;
    }

    /**
     * Get the original response. This may be different from the cached response if one
     * is used.
     *
     * @return \Amp\Artax\Response
     */
    public function getOriginalResponse() {
        return $this->originalResponse;
    }


}
