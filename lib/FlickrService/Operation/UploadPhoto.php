<?php

//Auto-generated by ArtaxServiceBuilder - https://github.com/Danack/ArtaxServiceBuilder
//
//Do not be surprised when any changes to this file are over-written.
//
namespace FlickrService\Operation;

class UploadPhoto implements \ArtaxServiceBuilder\Operation {

    /**
     * @var $api \FlickrService\FlickrAPI\FlickrAPI
     */
    public $api = null;

    /**
     * @var $api array
     */
    public $parameters = null;

    /**
     * @var $api \Amp\Artax\Response
     */
    public $response = null;

    /**
     * Get the last response.
     *
     * @return \Amp\Artax\Response
     */
    public function getResponse() {
        return $this->response;
    }

    /**
     * Set the last response. This should only be used by the API class when the
     * operation has been dispatched. Storing the response is required as some APIs
     * store out-of-bound information in the headers e.g. rate-limit info, pagination
     * that is not really part of the operation.
     */
    public function setResponse(\Amp\Artax\Response $response) {
        $this->response = $response;
    }

    public function __construct(\FlickrService\FlickrAPI\FlickrAPI $api, $photo, $title, $description, $tags, $async) {
        $defaultParams = [
            'format' => 'json',
            'is_public' => '0',
            'is_friend' => '0',
            'is_family' => '0',
        ];
        $this->setParams($defaultParams);
        $this->api = $api;
        $this->parameters['photo'] = $photo;
        $this->parameters['title'] = $title;
        $this->parameters['description'] = $description;
        $this->parameters['tags'] = $tags;
        $this->parameters['async'] = $async;
    }

    public function setAPI(\FlickrService\FlickrAPI\FlickrAPI $api) {
        $this->api = $api;
    }

    public function setParams(array $params) {
        if (array_key_exists('format', $params)) {
            $this->parameters['format'] = $params['format'];
        }
        if (array_key_exists('photo', $params)) {
            $this->parameters['photo'] = $params['photo'];
        }
        if (array_key_exists('title', $params)) {
            $this->parameters['title'] = $params['title'];
        }
        if (array_key_exists('description', $params)) {
            $this->parameters['description'] = $params['description'];
        }
        if (array_key_exists('tags', $params)) {
            $this->parameters['tags'] = $params['tags'];
        }
        if (array_key_exists('async', $params)) {
            $this->parameters['async'] = $params['async'];
        }
        if (array_key_exists('is_public', $params)) {
            $this->parameters['is_public'] = $params['is_public'];
        }
        if (array_key_exists('is_friend', $params)) {
            $this->parameters['is_friend'] = $params['is_friend'];
        }
        if (array_key_exists('is_family', $params)) {
            $this->parameters['is_family'] = $params['is_family'];
        }
    }

    /**
     * Set format
     *
     * @return $this
     */
    public function setFormat($format) {
        $this->parameters['format'] = $format;

        return $this;
    }

    /**
     * Set photo
     *
     * The file to upload
     *
     * @return $this
     */
    public function setPhoto($photo) {
        $this->parameters['photo'] = $photo;

        return $this;
    }

    /**
     * Set title
     *
     * The title of the photo.
     *
     * @return $this
     */
    public function setTitle($title) {
        $this->parameters['title'] = $title;

        return $this;
    }

    /**
     * Set description
     *
     * The description of the photo
     *
     * @return $this
     */
    public function setDescription($description) {
        $this->parameters['description'] = $description;

        return $this;
    }

    /**
     * Set tags
     *
     * A space-separated list of tags to apply to the photo.
     *
     * @return $this
     */
    public function setTags($tags) {
        $this->parameters['tags'] = $tags;

        return $this;
    }

    /**
     * Set async
     *
     * Whether to process the file asynchronously.
     *
     * @return $this
     */
    public function setAsync($async) {
        $this->parameters['async'] = $async;

        return $this;
    }

    /**
     * Set is_public
     *
     * @return $this
     */
    public function setIs_public($is_public) {
        $this->parameters['is_public'] = $is_public;

        return $this;
    }

    /**
     * Set is_friend
     *
     * @return $this
     */
    public function setIs_friend($is_friend) {
        $this->parameters['is_friend'] = $is_friend;

        return $this;
    }

    /**
     * Set is_family
     *
     * @return $this
     */
    public function setIs_family($is_family) {
        $this->parameters['is_family'] = $is_family;

        return $this;
    }

    public function getParameters() {
        return $this->parameters;
    }

    /**
     * Apply any filters necessary to the parameter
     *
     * @return \FlickrService\Model\FileUploadResponse
     * @param string $name The name of the parameter to get.
     */
    public function getFilteredParameter($name) {
        if (array_key_exists($name, $this->parameters) == false) {
            throw new \Exception('Parameter '.$name.' does not exist.');
        }

        $value = $this->parameters[$name];


        return $value;
    }

    /**
     * Create an Amp\Artax\Request object from the operation.
     *
     * @return \Amp\Artax\Request
     */
    public function createRequest() {
        $request = new \Amp\Artax\Request();
        $url = null;
        $request->setMethod('POST');


        $formBody = new \Artax\FormBody;
        if (array_key_exists('format', $this->parameters) == true) {
        $value = $this->getFilteredParameter('format');
            $formBody->addField('format', $value);
        }
        $value = $this->getFilteredParameter('photo');
        $formBody->addFileField('photo', $value);
        $value = $this->getFilteredParameter('title');
        $formBody->addField('title', $value);
        $value = $this->getFilteredParameter('description');
        $formBody->addField('description', $value);
        $value = $this->getFilteredParameter('tags');
        $formBody->addField('tags', $value);
        $value = $this->getFilteredParameter('async');
        $formBody->addField('async', $value);
        if (array_key_exists('is_public', $this->parameters) == true) {
        $value = $this->getFilteredParameter('is_public');
            $formBody->addField('is_public', $value);
        }
        if (array_key_exists('is_friend', $this->parameters) == true) {
        $value = $this->getFilteredParameter('is_friend');
            $formBody->addField('is_friend', $value);
        }
        if (array_key_exists('is_family', $this->parameters) == true) {
        $value = $this->getFilteredParameter('is_family');
            $formBody->addField('is_family', $value);
        }

        //Parameters are parsed and set, lets prepare the request
        $request->setBody($formBody);
        if ($url == null) {
            $url = "http://api.flickr.com/services/upload/";
        }
        $request->setUri($url);

        return $request;
    }

    /**
     * Create and execute the operation, returning the raw response from the server.
     *
     * @return \Amp\Artax\Response
     */
    public function createAndExecute() {
        $request = $this->createRequest();
        $response = $this->api->execute($request, $this);
        $this->response = $response;

        return $response;
    }

    /**
     * Create and execute the operation, then return the processed  response.
     *
     * @return mixed|\FlickrService\Model\FileUploadResponse
     */
    public function call() {
        $request = $this->createRequest();
        $response = $this->api->execute($request, $this);
        $this->response = $response;

        if ($this->shouldResponseBeProcessed($response)) {
            $instance = \FlickrService\Model\FileUploadResponse::createFromResponse($response, $this);

            return $instance;
        }
        return $response;
    }

    /**
     * Execute the operation, returning the parsed response
     *
     * @return \FlickrService\Model\FileUploadResponse
     */
    public function execute() {
        $request = $this->createRequest();
        return $this->dispatch($request);
    }

    /**
     * Execute the operation asynchronously, passing the parsed response to the
     * callback
     *
     * @return \FlickrService\Model\FileUploadResponse
     */
    public function executeAsync(callable $callable) {
        $request = $this->createRequest();
        return $this->dispatchAsync($request, $callable);
    }

    /**
     * Dispatch the request for this operation and process the response. Allows you to
     * modify the request before it is sent.
     *
     * @return \FlickrService\Model\FileUploadResponse
     * @param \Amp\Artax\Request $request The request to be processed
     */
    public function dispatch(\Amp\Artax\Request $request) {
        $response = $this->api->execute($request, $this);
        $this->response = $response;
        $instance = \FlickrService\Model\FileUploadResponse::createFromResponse($response, $this);

        return $instance;
    }

    /**
     * Dispatch the request for this operation and process the response asynchronously.
     * Allows you to modify the request before it is sent.
     *
     * @return \FlickrService\Model\FileUploadResponse
     * @param \Amp\Artax\Request $request The request to be processed
     * @param callable $callable The callable that processes the response
     */
    public function dispatchAsync(\Amp\Artax\Request $request, callable $callable) {
        return $this->api->executeAsync($request, $this, $callable);
    }

    /**
     * Dispatch the request for this operation and process the response. Allows you to
     * modify the request before it is sent.
     *
     * @return \FlickrService\Model\FileUploadResponse
     * @param \Amp\Artax\Response $response The HTTP response.
     */
    public function processResponse(\Amp\Artax\Response $response) {
        $instance = \FlickrService\Model\FileUploadResponse::createFromResponse($response, $this);

        return $instance;
    }

    /**
     * Determine whether the response should be processed. Override this method to have
     * a per-operation decision, otherwise the function is the API class will be used.
     *
     * @return \FlickrService\Model\FileUploadResponse
     */
    public function shouldResponseBeProcessed(\Amp\Artax\Response $response) {
        return $this->api->shouldResponseBeProcessed($response);
    }

    /**
     * Determine whether the response is an error. Override this method to have a
     * per-operation decision, otherwise the function from the API class will be used.
     *
     * @return null|\ArtaxServiceBuilder\BadResponseException
     */
    public function translateResponseToException(\Amp\Artax\Response $response) {
        return $this->api->translateResponseToException($response);
    }

    /**
     * Determine whether the response indicates that we should use a cached response.
     * Override this method to have a per-operation decision, otherwise the
     * functionfrom the API class will be used.
     *
     * @return \FlickrService\Model\FileUploadResponse
     */
    public function shouldUseCachedResponse(\Amp\Artax\Response $response) {
        return $this->api->shouldUseCachedResponse($response);
    }

    /**
     * Determine whether the response should be cached. Override this method to have a
     * per-operation decision, otherwise the function from the API class will be used.
     *
     * @return \FlickrService\Model\FileUploadResponse
     */
    public function shouldResponseBeCached(\Amp\Artax\Response $response) {
        return $this->api->shouldResponseBeCached($response);
    }


}
